#!/bin/bash

# SSH-Tunnel
#
# Maintainer: Marco Kellershoff
# Version: 1.0.0
#
# Usage:
# `ssh-tunnel add github.com 22:22 marco@gate.allheim.com`
# will result in `sudo ssh -i /home/marco/id_rsa -L 22:github.com:22 marco@gate.allheim.com`
# Which means all traffic to 127.0.0.1:22 will be forwarded to github.com:22
# by the gateway.
#
# `ssh-tunnel add github.com 2282:22 marco@gate.allheim.com`
# will result in `ssh -L 2282:github.com:22 marco@gate.allheim.com`
# Which means all traffic to 127.0.0.1:2282 will be forwarded to github.com:22
# by the gateway.

set -euo pipefail

SSH_TUNNELS_PID_DIR="$HOME/.ssh-tunnels"

reuse_user_ssh_sock() {
        if [[ "$SSH_AGENT_PID" == "" ]]; then
                eval "$(<$1/.ssh-agent-thing)" &>/dev/null
        fi
}

echo_usage() {
        echo Usage:
        echo
        echo \`ssh-tunnel add github.com 22:22 marco@gate.allheim.com\`
        echo
        echo will result in \`sudo ssh -i /home/marco/id_rsa -L 22:github.com:22 marco@gate.allheim.com\`
        echo Which means all traffic to 127.0.0.1:22 will be forwarded to github.com:22\`
        echo by the gateway.
        echo
        echo \`ssh-tunnel add github.com 2282:22 marco@gate.allheim.com\`
        echo
        echo will result in \`ssh -L 2282:github.com:22 marco@gate.allheim.com\`
        echo Which means all traffic to 127.0.0.1:2282 will be forwarded to github.com:22
        echo by the gateway.
        exit
}

write_pid_file() {
        local user=$1
        local host=$2
        local ports=$3
        local gateway=$4
        local command=$5
        local unixtimestamp=$(date +%s)
        local pid_file_contents=$(make_pid_file "$user" "$host" "$ports" "$gateway" "$command")
        echo "$pid_file_contents" > $SSH_TUNNELS_PID_DIR/$unixtimestamp
}

make_pid_file() {
        local user=$1
        local host=$2
        local ports=$3
        local gateway=$4
        local command=$5
        echo "user=$user"
        echo "host=$host"
        echo "ports=$ports"
        echo "gateway=$gateway"
        echo "command=$command"
}

list_add_pid_files() {
        for pid in $(ls $SSH_TUNNELS_PID_DIR/); do
                echo $pid
        done
}

get_pid_value() {
        echo "$(show_pid_details "$1")" | grep "$2=" | awk -F '=' '{print $2}'
}

get_proccess_info_by_pid() {
        local command="$(get_pid_value "$1" "command")"
        ps aux | grep "$command" | head -1
}

kill_pid() {
        local process_info=$(get_proccess_info_by_pid "$1")
        local user=$(echo $process_info | awk '{print $1}')
        local os_pid=$(echo $process_info | awk '{print $2}')
        if [[ "$user" == "root" ]]; then
                sudo kill "$os_pid"
        else
                kill "$os_pid"
        fi
        rm $SSH_TUNNELS_PID_DIR/"$1"
}

show_pid_details() {
        local file="$SSH_TUNNELS_PID_DIR/$1"
        local line
        if [[ -f $file ]]; then
                while IFS="\n" read -r line || [[ -n "$line" ]]; do
                echo "$line"
                done < "$file"
        else
                echo "No such file $1"
                exit
        fi
}

add_tunnel() {
        local non_privileged_ports_start_at=1025
        local h=$HOME
        local ports=(${2//\:/ })
        local user=$(whoami)
        local pid
        # non privileged port forward
        if [[ ${ports[0]} -gt $non_privileged_ports_start_at ]] ||
                [[ ${ports[0]} -eq $non_privileged_ports_start_at ]]; then
                ssh -f -N -L ${ports[0]}:$1:${ports[1]} $3
        else # privileged port forwarded required
                sudo -E ssh -f -N -L ${ports[0]}:$1:${ports[1]} $3
        fi
        write_pid_file "$user" "$1" "$2" "$3" "ssh -f -N -L ${ports[0]}:$1:${ports[1]} $3"
}

setup() {
        if [[ ! -d $SSH_TUNNELS_PID_DIR ]]; then
                mkdir $SSH_TUNNELS_PID_DIR
        fi
}

main() {
        setup
        if [[ $# == 0 ]]; then
                echo_usage
                exit
        fi
        if [[ $# == 2 ]] && [[ $1 == "show" ]]; then
                show_pid_details "$2"
                exit
        fi
        if [[ $# == 2 ]] && [[ $1 == "kill" ]]; then
                kill_pid "$2"
                exit
        fi
        if [[ $# == 3 ]] && [[ $1 == "get" ]]; then
                get_pid_value "$2" "$3"
                exit
        fi
        if [[ $# == 4 ]] && [[ $1 == "add" ]]; then
                add_tunnel "$2" "$3" "$4"
                exit
        fi
        if [[ $# == 1 ]] && ( [[ $1 == "ls" ]] || [[ $1 == "list" ]] ); then
                list_add_pid_files
                exit
        fi
}

main "$@"

