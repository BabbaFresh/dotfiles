[user]
        name = Marco Kellershoff
        email = marco.kellershoff@gmail.com
        signingkey = 444B07DA30AF7D2F65DA417BBE278ACC70E46EDE

[credential]
        helper = gnome-keyring

[commit]
        gpgsign = true

[color]
        status = auto

[color "status"]
        added = green
        changed = blue
        untracked = magenta
        deleted = red

[alias]
        # git co
        st = status
        # git co
        co = checkout
        # git commit
        ci = commit
        # List commits showing changed files is invoked with git ll and looks like
        ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
        # List with no colors if you need to chain the out put with Unix pipes:
        lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
        # List oneline commits showing dates
        lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=local --date=format:'%Y-%m-%d %H:%M:%S'
        # List oneline commits showing relative dates
        ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
        # see all the commits related to a file, with the diff of the changes
        filelog = log -u
        fl = log -u
        # Show modified files in last commit:
        dl = "!git ll -1"
        # Show a diff last commit:
        dlc = diff --cached HEAD^
        # Diff color
        diffc = 'git diff --color | sed -E "s/^([^-+ ]*)[-+ ]/\\1/" | less -r'
        # git lds --show-signature with optional limit ( like `git log -3`)
        # Just do `git sig` for the most recent one or `git log 7` for the 7
        # most recent ones.
        sig = "!f() { if [[ ! -z $1 ]]; then git lds --show-signature -$1; else git lds --show-signature -1; fi; }; f"
        soc = log --show-signature -n 1
        # This is what git blame should look like in the first place
        # bbl stands for better blame
        bbl = log -p -M --follow --stat --show-signature --
        # shorthands for git add -p (patch)
        patch = add -p
        yank = add -p
        yy = add -p

[push]
        default = nothing

[pull]
        default = nothing
[merge]
        conflictstyle = diff3

[core]
	whitespace = -blank-at-eof
